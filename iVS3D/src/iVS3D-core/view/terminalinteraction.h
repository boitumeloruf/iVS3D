#ifndef TERMINALINTERACTION_H
#define TERMINALINTERACTION_H

#include <QObject>
#include <iostream>
#include <string>
#include <QMutex>
#include <QMutexLocker>

#include "progressdisplay.h"

#define ENABLE_TERMINAL std::cout.clear()
#define DISABLE_TERMINAL std::cout.setstate(std::ios_base::failbit)

#define SPLITTER " - "

/**
 * @class TerminalInteraction
 *
 * @ingroup View
 *
 * @brief The TerminalInteraction class, which is used as a minimalistic ui for the mode without the full sized gui
 *
 * @author Dominic Zahn
 *
 * @date 2021/09/28
 */
class TerminalInteraction : public QObject, public ProgressDisplay
{
    Q_OBJECT
public:   
    static TerminalInteraction &instance();

public slots:
    /**
     * @brief [slot] slot_displayProgress gets activated if there is new progress from a thread
     * @param progress [0, 100] in percent
     * @param currentProgress as a QString, which will be used as suffix for the progress
     */
    void slot_displayProgress(int progress, QString currentProgress) override;
    /**
     * @brief [slot] slot_displayMessage shows a message that was generated by a diffrent component
     * @param message as a QString
     */
    void slot_displayMessage(QString message) override;

private:
    bool m_eraseIsActive = false;
    uint m_lengthToErase = 0;
    uint m_suffixLength = 0;
    QMutex mutex;
    /**
     * @brief TerminalInteraction Constructor
     */
    TerminalInteraction();
};

#endif // TERMINALINTERACTION_H
